// Code generated by "enumer -type AssetSubtype -trimprefix AssetSubtype -json -transform snake-upper"; DO NOT EDIT.

package td

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AssetSubtypeName = "UNSPECIFIEDADRCEFCOEETFETNGDROEFPRFRGTUITWAR"

var _AssetSubtypeIndex = [...]uint8{0, 11, 14, 17, 20, 23, 26, 29, 32, 35, 38, 41, 44}

const _AssetSubtypeLowerName = "unspecifiedadrcefcoeetfetngdroefprfrgtuitwar"

func (i AssetSubtype) String() string {
	if i >= AssetSubtype(len(_AssetSubtypeIndex)-1) {
		return fmt.Sprintf("AssetSubtype(%d)", i)
	}
	return _AssetSubtypeName[_AssetSubtypeIndex[i]:_AssetSubtypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AssetSubtypeNoOp() {
	var x [1]struct{}
	_ = x[AssetSubtypeUnspecified-(0)]
	_ = x[AssetSubtypeADR-(1)]
	_ = x[AssetSubtypeCEF-(2)]
	_ = x[AssetSubtypeCOE-(3)]
	_ = x[AssetSubtypeETF-(4)]
	_ = x[AssetSubtypeETN-(5)]
	_ = x[AssetSubtypeGDR-(6)]
	_ = x[AssetSubtypeOEF-(7)]
	_ = x[AssetSubtypePRF-(8)]
	_ = x[AssetSubtypeRGT-(9)]
	_ = x[AssetSubtypeUIT-(10)]
	_ = x[AssetSubtypeWAR-(11)]
}

var _AssetSubtypeValues = []AssetSubtype{AssetSubtypeUnspecified, AssetSubtypeADR, AssetSubtypeCEF, AssetSubtypeCOE, AssetSubtypeETF, AssetSubtypeETN, AssetSubtypeGDR, AssetSubtypeOEF, AssetSubtypePRF, AssetSubtypeRGT, AssetSubtypeUIT, AssetSubtypeWAR}

var _AssetSubtypeNameToValueMap = map[string]AssetSubtype{
	_AssetSubtypeName[0:11]:       AssetSubtypeUnspecified,
	_AssetSubtypeLowerName[0:11]:  AssetSubtypeUnspecified,
	_AssetSubtypeName[11:14]:      AssetSubtypeADR,
	_AssetSubtypeLowerName[11:14]: AssetSubtypeADR,
	_AssetSubtypeName[14:17]:      AssetSubtypeCEF,
	_AssetSubtypeLowerName[14:17]: AssetSubtypeCEF,
	_AssetSubtypeName[17:20]:      AssetSubtypeCOE,
	_AssetSubtypeLowerName[17:20]: AssetSubtypeCOE,
	_AssetSubtypeName[20:23]:      AssetSubtypeETF,
	_AssetSubtypeLowerName[20:23]: AssetSubtypeETF,
	_AssetSubtypeName[23:26]:      AssetSubtypeETN,
	_AssetSubtypeLowerName[23:26]: AssetSubtypeETN,
	_AssetSubtypeName[26:29]:      AssetSubtypeGDR,
	_AssetSubtypeLowerName[26:29]: AssetSubtypeGDR,
	_AssetSubtypeName[29:32]:      AssetSubtypeOEF,
	_AssetSubtypeLowerName[29:32]: AssetSubtypeOEF,
	_AssetSubtypeName[32:35]:      AssetSubtypePRF,
	_AssetSubtypeLowerName[32:35]: AssetSubtypePRF,
	_AssetSubtypeName[35:38]:      AssetSubtypeRGT,
	_AssetSubtypeLowerName[35:38]: AssetSubtypeRGT,
	_AssetSubtypeName[38:41]:      AssetSubtypeUIT,
	_AssetSubtypeLowerName[38:41]: AssetSubtypeUIT,
	_AssetSubtypeName[41:44]:      AssetSubtypeWAR,
	_AssetSubtypeLowerName[41:44]: AssetSubtypeWAR,
}

var _AssetSubtypeNames = []string{
	_AssetSubtypeName[0:11],
	_AssetSubtypeName[11:14],
	_AssetSubtypeName[14:17],
	_AssetSubtypeName[17:20],
	_AssetSubtypeName[20:23],
	_AssetSubtypeName[23:26],
	_AssetSubtypeName[26:29],
	_AssetSubtypeName[29:32],
	_AssetSubtypeName[32:35],
	_AssetSubtypeName[35:38],
	_AssetSubtypeName[38:41],
	_AssetSubtypeName[41:44],
}

// AssetSubtypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AssetSubtypeString(s string) (AssetSubtype, error) {
	if val, ok := _AssetSubtypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AssetSubtypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AssetSubtype values", s)
}

// AssetSubtypeValues returns all values of the enum
func AssetSubtypeValues() []AssetSubtype {
	return _AssetSubtypeValues
}

// AssetSubtypeStrings returns a slice of all String values of the enum
func AssetSubtypeStrings() []string {
	strs := make([]string, len(_AssetSubtypeNames))
	copy(strs, _AssetSubtypeNames)
	return strs
}

// IsAAssetSubtype returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AssetSubtype) IsAAssetSubtype() bool {
	for _, v := range _AssetSubtypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AssetSubtype
func (i AssetSubtype) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AssetSubtype
func (i *AssetSubtype) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AssetSubtype should be a string, got %s", data)
	}

	var err error
	*i, err = AssetSubtypeString(s)
	return err
}
