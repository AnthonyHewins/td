// Code generated by "enumer -type AssetType -trimprefix AssetType -json -transform snake-upper"; DO NOT EDIT.

package td

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _AssetTypeName = "UNSPECIFIEDBONDEQUITYETFEXTENDEDFOREXFUTUREFUTURE_OPTIONFUNDAMENTALINDEXINDICATORMUTUAL_FUNDOPTIONUNKNOWN"

var _AssetTypeIndex = [...]uint8{0, 11, 15, 21, 24, 32, 37, 43, 56, 67, 72, 81, 92, 98, 105}

const _AssetTypeLowerName = "unspecifiedbondequityetfextendedforexfuturefuture_optionfundamentalindexindicatormutual_fundoptionunknown"

func (i AssetType) String() string {
	if i >= AssetType(len(_AssetTypeIndex)-1) {
		return fmt.Sprintf("AssetType(%d)", i)
	}
	return _AssetTypeName[_AssetTypeIndex[i]:_AssetTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _AssetTypeNoOp() {
	var x [1]struct{}
	_ = x[AssetTypeUnspecified-(0)]
	_ = x[AssetTypeBond-(1)]
	_ = x[AssetTypeEquity-(2)]
	_ = x[AssetTypeEtf-(3)]
	_ = x[AssetTypeExtended-(4)]
	_ = x[AssetTypeForex-(5)]
	_ = x[AssetTypeFuture-(6)]
	_ = x[AssetTypeFutureOption-(7)]
	_ = x[AssetTypeFundamental-(8)]
	_ = x[AssetTypeIndex-(9)]
	_ = x[AssetTypeIndicator-(10)]
	_ = x[AssetTypeMutualFund-(11)]
	_ = x[AssetTypeOption-(12)]
	_ = x[AssetTypeUnknown-(13)]
}

var _AssetTypeValues = []AssetType{AssetTypeUnspecified, AssetTypeBond, AssetTypeEquity, AssetTypeEtf, AssetTypeExtended, AssetTypeForex, AssetTypeFuture, AssetTypeFutureOption, AssetTypeFundamental, AssetTypeIndex, AssetTypeIndicator, AssetTypeMutualFund, AssetTypeOption, AssetTypeUnknown}

var _AssetTypeNameToValueMap = map[string]AssetType{
	_AssetTypeName[0:11]:        AssetTypeUnspecified,
	_AssetTypeLowerName[0:11]:   AssetTypeUnspecified,
	_AssetTypeName[11:15]:       AssetTypeBond,
	_AssetTypeLowerName[11:15]:  AssetTypeBond,
	_AssetTypeName[15:21]:       AssetTypeEquity,
	_AssetTypeLowerName[15:21]:  AssetTypeEquity,
	_AssetTypeName[21:24]:       AssetTypeEtf,
	_AssetTypeLowerName[21:24]:  AssetTypeEtf,
	_AssetTypeName[24:32]:       AssetTypeExtended,
	_AssetTypeLowerName[24:32]:  AssetTypeExtended,
	_AssetTypeName[32:37]:       AssetTypeForex,
	_AssetTypeLowerName[32:37]:  AssetTypeForex,
	_AssetTypeName[37:43]:       AssetTypeFuture,
	_AssetTypeLowerName[37:43]:  AssetTypeFuture,
	_AssetTypeName[43:56]:       AssetTypeFutureOption,
	_AssetTypeLowerName[43:56]:  AssetTypeFutureOption,
	_AssetTypeName[56:67]:       AssetTypeFundamental,
	_AssetTypeLowerName[56:67]:  AssetTypeFundamental,
	_AssetTypeName[67:72]:       AssetTypeIndex,
	_AssetTypeLowerName[67:72]:  AssetTypeIndex,
	_AssetTypeName[72:81]:       AssetTypeIndicator,
	_AssetTypeLowerName[72:81]:  AssetTypeIndicator,
	_AssetTypeName[81:92]:       AssetTypeMutualFund,
	_AssetTypeLowerName[81:92]:  AssetTypeMutualFund,
	_AssetTypeName[92:98]:       AssetTypeOption,
	_AssetTypeLowerName[92:98]:  AssetTypeOption,
	_AssetTypeName[98:105]:      AssetTypeUnknown,
	_AssetTypeLowerName[98:105]: AssetTypeUnknown,
}

var _AssetTypeNames = []string{
	_AssetTypeName[0:11],
	_AssetTypeName[11:15],
	_AssetTypeName[15:21],
	_AssetTypeName[21:24],
	_AssetTypeName[24:32],
	_AssetTypeName[32:37],
	_AssetTypeName[37:43],
	_AssetTypeName[43:56],
	_AssetTypeName[56:67],
	_AssetTypeName[67:72],
	_AssetTypeName[72:81],
	_AssetTypeName[81:92],
	_AssetTypeName[92:98],
	_AssetTypeName[98:105],
}

// AssetTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func AssetTypeString(s string) (AssetType, error) {
	if val, ok := _AssetTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _AssetTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to AssetType values", s)
}

// AssetTypeValues returns all values of the enum
func AssetTypeValues() []AssetType {
	return _AssetTypeValues
}

// AssetTypeStrings returns a slice of all String values of the enum
func AssetTypeStrings() []string {
	strs := make([]string, len(_AssetTypeNames))
	copy(strs, _AssetTypeNames)
	return strs
}

// IsAAssetType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i AssetType) IsAAssetType() bool {
	for _, v := range _AssetTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for AssetType
func (i AssetType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for AssetType
func (i *AssetType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("AssetType should be a string, got %s", data)
	}

	var err error
	*i, err = AssetTypeString(s)
	return err
}
