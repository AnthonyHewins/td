// Code generated by "enumer -type ChartEquityField -trimprefix ChartField"; DO NOT EDIT.

package td

import (
	"fmt"
	"strings"
)

const _ChartEquityFieldName = "SymbolOpenPriceHighPriceLowPriceClosePriceVolumeSequenceTimeDay"

var _ChartEquityFieldIndex = [...]uint8{0, 6, 15, 24, 32, 42, 48, 56, 60, 63}

const _ChartEquityFieldLowerName = "symbolopenpricehighpricelowpriceclosepricevolumesequencetimeday"

func (i ChartEquityField) String() string {
	if i >= ChartEquityField(len(_ChartEquityFieldIndex)-1) {
		return fmt.Sprintf("ChartEquityField(%d)", i)
	}
	return _ChartEquityFieldName[_ChartEquityFieldIndex[i]:_ChartEquityFieldIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ChartEquityFieldNoOp() {
	var x [1]struct{}
	_ = x[ChartFieldSymbol-(0)]
	_ = x[ChartFieldOpenPrice-(1)]
	_ = x[ChartFieldHighPrice-(2)]
	_ = x[ChartFieldLowPrice-(3)]
	_ = x[ChartFieldClosePrice-(4)]
	_ = x[ChartFieldVolume-(5)]
	_ = x[ChartFieldSequence-(6)]
	_ = x[ChartFieldTime-(7)]
	_ = x[ChartFieldDay-(8)]
}

var _ChartEquityFieldValues = []ChartEquityField{ChartFieldSymbol, ChartFieldOpenPrice, ChartFieldHighPrice, ChartFieldLowPrice, ChartFieldClosePrice, ChartFieldVolume, ChartFieldSequence, ChartFieldTime, ChartFieldDay}

var _ChartEquityFieldNameToValueMap = map[string]ChartEquityField{
	_ChartEquityFieldName[0:6]:        ChartFieldSymbol,
	_ChartEquityFieldLowerName[0:6]:   ChartFieldSymbol,
	_ChartEquityFieldName[6:15]:       ChartFieldOpenPrice,
	_ChartEquityFieldLowerName[6:15]:  ChartFieldOpenPrice,
	_ChartEquityFieldName[15:24]:      ChartFieldHighPrice,
	_ChartEquityFieldLowerName[15:24]: ChartFieldHighPrice,
	_ChartEquityFieldName[24:32]:      ChartFieldLowPrice,
	_ChartEquityFieldLowerName[24:32]: ChartFieldLowPrice,
	_ChartEquityFieldName[32:42]:      ChartFieldClosePrice,
	_ChartEquityFieldLowerName[32:42]: ChartFieldClosePrice,
	_ChartEquityFieldName[42:48]:      ChartFieldVolume,
	_ChartEquityFieldLowerName[42:48]: ChartFieldVolume,
	_ChartEquityFieldName[48:56]:      ChartFieldSequence,
	_ChartEquityFieldLowerName[48:56]: ChartFieldSequence,
	_ChartEquityFieldName[56:60]:      ChartFieldTime,
	_ChartEquityFieldLowerName[56:60]: ChartFieldTime,
	_ChartEquityFieldName[60:63]:      ChartFieldDay,
	_ChartEquityFieldLowerName[60:63]: ChartFieldDay,
}

var _ChartEquityFieldNames = []string{
	_ChartEquityFieldName[0:6],
	_ChartEquityFieldName[6:15],
	_ChartEquityFieldName[15:24],
	_ChartEquityFieldName[24:32],
	_ChartEquityFieldName[32:42],
	_ChartEquityFieldName[42:48],
	_ChartEquityFieldName[48:56],
	_ChartEquityFieldName[56:60],
	_ChartEquityFieldName[60:63],
}

// ChartEquityFieldString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ChartEquityFieldString(s string) (ChartEquityField, error) {
	if val, ok := _ChartEquityFieldNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ChartEquityFieldNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ChartEquityField values", s)
}

// ChartEquityFieldValues returns all values of the enum
func ChartEquityFieldValues() []ChartEquityField {
	return _ChartEquityFieldValues
}

// ChartEquityFieldStrings returns a slice of all String values of the enum
func ChartEquityFieldStrings() []string {
	strs := make([]string, len(_ChartEquityFieldNames))
	copy(strs, _ChartEquityFieldNames)
	return strs
}

// IsAChartEquityField returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ChartEquityField) IsAChartEquityField() bool {
	for _, v := range _ChartEquityFieldValues {
		if i == v {
			return true
		}
	}
	return false
}
