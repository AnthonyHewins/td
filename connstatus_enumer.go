// Code generated by "enumer -type ConnStatus -text"; DO NOT EDIT.

package td

import (
	"fmt"
	"strings"
)

const _ConnStatusName = "ConnStatusUnspecifiedConnStatusNonProConnStatusPro"

var _ConnStatusIndex = [...]uint8{0, 21, 37, 50}

const _ConnStatusLowerName = "connstatusunspecifiedconnstatusnonproconnstatuspro"

func (i ConnStatus) String() string {
	if i >= ConnStatus(len(_ConnStatusIndex)-1) {
		return fmt.Sprintf("ConnStatus(%d)", i)
	}
	return _ConnStatusName[_ConnStatusIndex[i]:_ConnStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ConnStatusNoOp() {
	var x [1]struct{}
	_ = x[ConnStatusUnspecified-(0)]
	_ = x[ConnStatusNonPro-(1)]
	_ = x[ConnStatusPro-(2)]
}

var _ConnStatusValues = []ConnStatus{ConnStatusUnspecified, ConnStatusNonPro, ConnStatusPro}

var _ConnStatusNameToValueMap = map[string]ConnStatus{
	_ConnStatusName[0:21]:       ConnStatusUnspecified,
	_ConnStatusLowerName[0:21]:  ConnStatusUnspecified,
	_ConnStatusName[21:37]:      ConnStatusNonPro,
	_ConnStatusLowerName[21:37]: ConnStatusNonPro,
	_ConnStatusName[37:50]:      ConnStatusPro,
	_ConnStatusLowerName[37:50]: ConnStatusPro,
}

var _ConnStatusNames = []string{
	_ConnStatusName[0:21],
	_ConnStatusName[21:37],
	_ConnStatusName[37:50],
}

// ConnStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ConnStatusString(s string) (ConnStatus, error) {
	if val, ok := _ConnStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ConnStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ConnStatus values", s)
}

// ConnStatusValues returns all values of the enum
func ConnStatusValues() []ConnStatus {
	return _ConnStatusValues
}

// ConnStatusStrings returns a slice of all String values of the enum
func ConnStatusStrings() []string {
	strs := make([]string, len(_ConnStatusNames))
	copy(strs, _ConnStatusNames)
	return strs
}

// IsAConnStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ConnStatus) IsAConnStatus() bool {
	for _, v := range _ConnStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for ConnStatus
func (i ConnStatus) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for ConnStatus
func (i *ConnStatus) UnmarshalText(text []byte) error {
	var err error
	*i, err = ConnStatusString(string(text))
	return err
}
