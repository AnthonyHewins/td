// Code generated by "enumer -type ExchangeID -trimprefix ExchangeID"; DO NOT EDIT.

package td

import (
	"fmt"
	"strings"
)

const _ExchangeIDName = "UnspecifiedAmexIndicatorIndicesMutualFundNasdaqNysePacificPinksOtcbb"

var _ExchangeIDIndex = [...]uint8{0, 11, 15, 24, 31, 41, 47, 51, 58, 63, 68}

const _ExchangeIDLowerName = "unspecifiedamexindicatorindicesmutualfundnasdaqnysepacificpinksotcbb"

func (i ExchangeID) String() string {
	if i >= ExchangeID(len(_ExchangeIDIndex)-1) {
		return fmt.Sprintf("ExchangeID(%d)", i)
	}
	return _ExchangeIDName[_ExchangeIDIndex[i]:_ExchangeIDIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _ExchangeIDNoOp() {
	var x [1]struct{}
	_ = x[ExchangeIDUnspecified-(0)]
	_ = x[ExchangeIDAmex-(1)]
	_ = x[ExchangeIDIndicator-(2)]
	_ = x[ExchangeIDIndices-(3)]
	_ = x[ExchangeIDMutualFund-(4)]
	_ = x[ExchangeIDNasdaq-(5)]
	_ = x[ExchangeIDNyse-(6)]
	_ = x[ExchangeIDPacific-(7)]
	_ = x[ExchangeIDPinks-(8)]
	_ = x[ExchangeIDOtcbb-(9)]
}

var _ExchangeIDValues = []ExchangeID{ExchangeIDUnspecified, ExchangeIDAmex, ExchangeIDIndicator, ExchangeIDIndices, ExchangeIDMutualFund, ExchangeIDNasdaq, ExchangeIDNyse, ExchangeIDPacific, ExchangeIDPinks, ExchangeIDOtcbb}

var _ExchangeIDNameToValueMap = map[string]ExchangeID{
	_ExchangeIDName[0:11]:       ExchangeIDUnspecified,
	_ExchangeIDLowerName[0:11]:  ExchangeIDUnspecified,
	_ExchangeIDName[11:15]:      ExchangeIDAmex,
	_ExchangeIDLowerName[11:15]: ExchangeIDAmex,
	_ExchangeIDName[15:24]:      ExchangeIDIndicator,
	_ExchangeIDLowerName[15:24]: ExchangeIDIndicator,
	_ExchangeIDName[24:31]:      ExchangeIDIndices,
	_ExchangeIDLowerName[24:31]: ExchangeIDIndices,
	_ExchangeIDName[31:41]:      ExchangeIDMutualFund,
	_ExchangeIDLowerName[31:41]: ExchangeIDMutualFund,
	_ExchangeIDName[41:47]:      ExchangeIDNasdaq,
	_ExchangeIDLowerName[41:47]: ExchangeIDNasdaq,
	_ExchangeIDName[47:51]:      ExchangeIDNyse,
	_ExchangeIDLowerName[47:51]: ExchangeIDNyse,
	_ExchangeIDName[51:58]:      ExchangeIDPacific,
	_ExchangeIDLowerName[51:58]: ExchangeIDPacific,
	_ExchangeIDName[58:63]:      ExchangeIDPinks,
	_ExchangeIDLowerName[58:63]: ExchangeIDPinks,
	_ExchangeIDName[63:68]:      ExchangeIDOtcbb,
	_ExchangeIDLowerName[63:68]: ExchangeIDOtcbb,
}

var _ExchangeIDNames = []string{
	_ExchangeIDName[0:11],
	_ExchangeIDName[11:15],
	_ExchangeIDName[15:24],
	_ExchangeIDName[24:31],
	_ExchangeIDName[31:41],
	_ExchangeIDName[41:47],
	_ExchangeIDName[47:51],
	_ExchangeIDName[51:58],
	_ExchangeIDName[58:63],
	_ExchangeIDName[63:68],
}

// ExchangeIDString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func ExchangeIDString(s string) (ExchangeID, error) {
	if val, ok := _ExchangeIDNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _ExchangeIDNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to ExchangeID values", s)
}

// ExchangeIDValues returns all values of the enum
func ExchangeIDValues() []ExchangeID {
	return _ExchangeIDValues
}

// ExchangeIDStrings returns a slice of all String values of the enum
func ExchangeIDStrings() []string {
	strs := make([]string, len(_ExchangeIDNames))
	copy(strs, _ExchangeIDNames)
	return strs
}

// IsAExchangeID returns "true" if the value is listed in the enum definition. "false" otherwise
func (i ExchangeID) IsAExchangeID() bool {
	for _, v := range _ExchangeIDValues {
		if i == v {
			return true
		}
	}
	return false
}
