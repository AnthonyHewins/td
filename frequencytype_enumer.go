// Code generated by "enumer -type FrequencyType -json -trimprefix FrequencyType -transform lower"; DO NOT EDIT.

package td

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _FrequencyTypeName = "unspecifiedminutedailyweeklymonthly"

var _FrequencyTypeIndex = [...]uint8{0, 11, 17, 22, 28, 35}

const _FrequencyTypeLowerName = "unspecifiedminutedailyweeklymonthly"

func (i FrequencyType) String() string {
	if i >= FrequencyType(len(_FrequencyTypeIndex)-1) {
		return fmt.Sprintf("FrequencyType(%d)", i)
	}
	return _FrequencyTypeName[_FrequencyTypeIndex[i]:_FrequencyTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _FrequencyTypeNoOp() {
	var x [1]struct{}
	_ = x[FrequencyTypeUnspecified-(0)]
	_ = x[FrequencyTypeMinute-(1)]
	_ = x[FrequencyTypeDaily-(2)]
	_ = x[FrequencyTypeWeekly-(3)]
	_ = x[FrequencyTypeMonthly-(4)]
}

var _FrequencyTypeValues = []FrequencyType{FrequencyTypeUnspecified, FrequencyTypeMinute, FrequencyTypeDaily, FrequencyTypeWeekly, FrequencyTypeMonthly}

var _FrequencyTypeNameToValueMap = map[string]FrequencyType{
	_FrequencyTypeName[0:11]:       FrequencyTypeUnspecified,
	_FrequencyTypeLowerName[0:11]:  FrequencyTypeUnspecified,
	_FrequencyTypeName[11:17]:      FrequencyTypeMinute,
	_FrequencyTypeLowerName[11:17]: FrequencyTypeMinute,
	_FrequencyTypeName[17:22]:      FrequencyTypeDaily,
	_FrequencyTypeLowerName[17:22]: FrequencyTypeDaily,
	_FrequencyTypeName[22:28]:      FrequencyTypeWeekly,
	_FrequencyTypeLowerName[22:28]: FrequencyTypeWeekly,
	_FrequencyTypeName[28:35]:      FrequencyTypeMonthly,
	_FrequencyTypeLowerName[28:35]: FrequencyTypeMonthly,
}

var _FrequencyTypeNames = []string{
	_FrequencyTypeName[0:11],
	_FrequencyTypeName[11:17],
	_FrequencyTypeName[17:22],
	_FrequencyTypeName[22:28],
	_FrequencyTypeName[28:35],
}

// FrequencyTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func FrequencyTypeString(s string) (FrequencyType, error) {
	if val, ok := _FrequencyTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _FrequencyTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to FrequencyType values", s)
}

// FrequencyTypeValues returns all values of the enum
func FrequencyTypeValues() []FrequencyType {
	return _FrequencyTypeValues
}

// FrequencyTypeStrings returns a slice of all String values of the enum
func FrequencyTypeStrings() []string {
	strs := make([]string, len(_FrequencyTypeNames))
	copy(strs, _FrequencyTypeNames)
	return strs
}

// IsAFrequencyType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i FrequencyType) IsAFrequencyType() bool {
	for _, v := range _FrequencyTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for FrequencyType
func (i FrequencyType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for FrequencyType
func (i *FrequencyType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("FrequencyType should be a string, got %s", data)
	}

	var err error
	*i, err = FrequencyTypeString(s)
	return err
}
