// Code generated by "enumer -type PeriodType -json -trimprefix PeriodType -transform lower"; DO NOT EDIT.

package td

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _PeriodTypeName = "historyperiodunspecifiedhistoryperioddayhistoryperiodmonthhistoryperiodyearhistoryperiodytd"

var _PeriodTypeIndex = [...]uint8{0, 24, 40, 58, 75, 91}

const _PeriodTypeLowerName = "historyperiodunspecifiedhistoryperioddayhistoryperiodmonthhistoryperiodyearhistoryperiodytd"

func (i PeriodType) String() string {
	if i >= PeriodType(len(_PeriodTypeIndex)-1) {
		return fmt.Sprintf("PeriodType(%d)", i)
	}
	return _PeriodTypeName[_PeriodTypeIndex[i]:_PeriodTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _PeriodTypeNoOp() {
	var x [1]struct{}
	_ = x[HistoryPeriodUnspecified-(0)]
	_ = x[HistoryPeriodDay-(1)]
	_ = x[HistoryPeriodMonth-(2)]
	_ = x[HistoryPeriodYear-(3)]
	_ = x[HistoryPeriodYTD-(4)]
}

var _PeriodTypeValues = []PeriodType{HistoryPeriodUnspecified, HistoryPeriodDay, HistoryPeriodMonth, HistoryPeriodYear, HistoryPeriodYTD}

var _PeriodTypeNameToValueMap = map[string]PeriodType{
	_PeriodTypeName[0:24]:       HistoryPeriodUnspecified,
	_PeriodTypeLowerName[0:24]:  HistoryPeriodUnspecified,
	_PeriodTypeName[24:40]:      HistoryPeriodDay,
	_PeriodTypeLowerName[24:40]: HistoryPeriodDay,
	_PeriodTypeName[40:58]:      HistoryPeriodMonth,
	_PeriodTypeLowerName[40:58]: HistoryPeriodMonth,
	_PeriodTypeName[58:75]:      HistoryPeriodYear,
	_PeriodTypeLowerName[58:75]: HistoryPeriodYear,
	_PeriodTypeName[75:91]:      HistoryPeriodYTD,
	_PeriodTypeLowerName[75:91]: HistoryPeriodYTD,
}

var _PeriodTypeNames = []string{
	_PeriodTypeName[0:24],
	_PeriodTypeName[24:40],
	_PeriodTypeName[40:58],
	_PeriodTypeName[58:75],
	_PeriodTypeName[75:91],
}

// PeriodTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func PeriodTypeString(s string) (PeriodType, error) {
	if val, ok := _PeriodTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _PeriodTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to PeriodType values", s)
}

// PeriodTypeValues returns all values of the enum
func PeriodTypeValues() []PeriodType {
	return _PeriodTypeValues
}

// PeriodTypeStrings returns a slice of all String values of the enum
func PeriodTypeStrings() []string {
	strs := make([]string, len(_PeriodTypeNames))
	copy(strs, _PeriodTypeNames)
	return strs
}

// IsAPeriodType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i PeriodType) IsAPeriodType() bool {
	for _, v := range _PeriodTypeValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for PeriodType
func (i PeriodType) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for PeriodType
func (i *PeriodType) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("PeriodType should be a string, got %s", data)
	}

	var err error
	*i, err = PeriodTypeString(s)
	return err
}
