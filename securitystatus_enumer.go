// Code generated by "enumer -type SecurityStatus -trimprefix SecurityStatus -json"; DO NOT EDIT.

package td

import (
	"encoding/json"
	"fmt"
	"strings"
)

const _SecurityStatusName = "UnspecifiedNormalHaltedClosed"

var _SecurityStatusIndex = [...]uint8{0, 11, 17, 23, 29}

const _SecurityStatusLowerName = "unspecifiednormalhaltedclosed"

func (i SecurityStatus) String() string {
	if i >= SecurityStatus(len(_SecurityStatusIndex)-1) {
		return fmt.Sprintf("SecurityStatus(%d)", i)
	}
	return _SecurityStatusName[_SecurityStatusIndex[i]:_SecurityStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _SecurityStatusNoOp() {
	var x [1]struct{}
	_ = x[SecurityStatusUnspecified-(0)]
	_ = x[SecurityStatusNormal-(1)]
	_ = x[SecurityStatusHalted-(2)]
	_ = x[SecurityStatusClosed-(3)]
}

var _SecurityStatusValues = []SecurityStatus{SecurityStatusUnspecified, SecurityStatusNormal, SecurityStatusHalted, SecurityStatusClosed}

var _SecurityStatusNameToValueMap = map[string]SecurityStatus{
	_SecurityStatusName[0:11]:       SecurityStatusUnspecified,
	_SecurityStatusLowerName[0:11]:  SecurityStatusUnspecified,
	_SecurityStatusName[11:17]:      SecurityStatusNormal,
	_SecurityStatusLowerName[11:17]: SecurityStatusNormal,
	_SecurityStatusName[17:23]:      SecurityStatusHalted,
	_SecurityStatusLowerName[17:23]: SecurityStatusHalted,
	_SecurityStatusName[23:29]:      SecurityStatusClosed,
	_SecurityStatusLowerName[23:29]: SecurityStatusClosed,
}

var _SecurityStatusNames = []string{
	_SecurityStatusName[0:11],
	_SecurityStatusName[11:17],
	_SecurityStatusName[17:23],
	_SecurityStatusName[23:29],
}

// SecurityStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func SecurityStatusString(s string) (SecurityStatus, error) {
	if val, ok := _SecurityStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _SecurityStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to SecurityStatus values", s)
}

// SecurityStatusValues returns all values of the enum
func SecurityStatusValues() []SecurityStatus {
	return _SecurityStatusValues
}

// SecurityStatusStrings returns a slice of all String values of the enum
func SecurityStatusStrings() []string {
	strs := make([]string, len(_SecurityStatusNames))
	copy(strs, _SecurityStatusNames)
	return strs
}

// IsASecurityStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i SecurityStatus) IsASecurityStatus() bool {
	for _, v := range _SecurityStatusValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalJSON implements the json.Marshaler interface for SecurityStatus
func (i SecurityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(i.String())
}

// UnmarshalJSON implements the json.Unmarshaler interface for SecurityStatus
func (i *SecurityStatus) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return fmt.Errorf("SecurityStatus should be a string, got %s", data)
	}

	var err error
	*i, err = SecurityStatusString(s)
	return err
}
