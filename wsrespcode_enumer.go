// Code generated by "enumer -type WSRespCode -trimprefix WSRespCode -transform snake-upper"; DO NOT EDIT.

package td

import (
	"fmt"
	"strings"
)

const (
	_WSRespCodeName_0      = "SUCCESS"
	_WSRespCodeLowerName_0 = "success"
	_WSRespCodeName_1      = "LOGIN_DENIED"
	_WSRespCodeLowerName_1 = "login_denied"
	_WSRespCodeName_2      = "UNKNOWN_FAILURE"
	_WSRespCodeLowerName_2 = "unknown_failure"
	_WSRespCodeName_3      = "SERVICE_NOT_AVAILABLECLOSE_CONNECTION"
	_WSRespCodeLowerName_3 = "service_not_availableclose_connection"
	_WSRespCodeName_4      = "REACHED_SYMBOL_LIMITSTREAM_CONN_NOT_FOUNDBAD_COMMAND_FORMATFAILED_COMMAND_SUBSFAILED_COMMAND_UNSUBSFAILED_COMMAND_ADDFAILED_COMMAND_VIEWSUCCEEDED_COMMAND_SUBSSUCCEEDED_COMMAND_UNSUBSSUCCEEDED_COMMAND_ADDSUCCEEDED_COMMAND_VIEWSTOP_STREAMING"
	_WSRespCodeLowerName_4 = "reached_symbol_limitstream_conn_not_foundbad_command_formatfailed_command_subsfailed_command_unsubsfailed_command_addfailed_command_viewsucceeded_command_subssucceeded_command_unsubssucceeded_command_addsucceeded_command_viewstop_streaming"
	_WSRespCodeName_5      = "UNKNOWN"
	_WSRespCodeLowerName_5 = "unknown"
)

var (
	_WSRespCodeIndex_0 = [...]uint8{0, 7}
	_WSRespCodeIndex_1 = [...]uint8{0, 12}
	_WSRespCodeIndex_2 = [...]uint8{0, 15}
	_WSRespCodeIndex_3 = [...]uint8{0, 21, 37}
	_WSRespCodeIndex_4 = [...]uint8{0, 20, 41, 59, 78, 99, 117, 136, 158, 182, 203, 225, 239}
	_WSRespCodeIndex_5 = [...]uint8{0, 7}
)

func (i WSRespCode) String() string {
	switch {
	case i == 0:
		return _WSRespCodeName_0
	case i == 3:
		return _WSRespCodeName_1
	case i == 9:
		return _WSRespCodeName_2
	case 11 <= i && i <= 12:
		i -= 11
		return _WSRespCodeName_3[_WSRespCodeIndex_3[i]:_WSRespCodeIndex_3[i+1]]
	case 19 <= i && i <= 30:
		i -= 19
		return _WSRespCodeName_4[_WSRespCodeIndex_4[i]:_WSRespCodeIndex_4[i+1]]
	case i == 255:
		return _WSRespCodeName_5
	default:
		return fmt.Sprintf("WSRespCode(%d)", i)
	}
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _WSRespCodeNoOp() {
	var x [1]struct{}
	_ = x[WSRespCodeSuccess-(0)]
	_ = x[WSRespCodeLoginDenied-(3)]
	_ = x[WSRespCodeUnknownFailure-(9)]
	_ = x[WSRespCodeServiceNotAvailable-(11)]
	_ = x[WSRespCodeCloseConnection-(12)]
	_ = x[WSRespCodeReachedSymbolLimit-(19)]
	_ = x[WSRespCodeStreamConnNotFound-(20)]
	_ = x[WSRespCodeBadCommandFormat-(21)]
	_ = x[WSRespCodeFailedCommandSubs-(22)]
	_ = x[WSRespCodeFailedCommandUnsubs-(23)]
	_ = x[WSRespCodeFailedCommandAdd-(24)]
	_ = x[WSRespCodeFailedCommandView-(25)]
	_ = x[WSRespCodeSucceededCommandSubs-(26)]
	_ = x[WSRespCodeSucceededCommandUnsubs-(27)]
	_ = x[WSRespCodeSucceededCommandAdd-(28)]
	_ = x[WSRespCodeSucceededCommandView-(29)]
	_ = x[WSRespCodeStopStreaming-(30)]
	_ = x[WSRespCodeUnknown-(255)]
}

var _WSRespCodeValues = []WSRespCode{WSRespCodeSuccess, WSRespCodeLoginDenied, WSRespCodeUnknownFailure, WSRespCodeServiceNotAvailable, WSRespCodeCloseConnection, WSRespCodeReachedSymbolLimit, WSRespCodeStreamConnNotFound, WSRespCodeBadCommandFormat, WSRespCodeFailedCommandSubs, WSRespCodeFailedCommandUnsubs, WSRespCodeFailedCommandAdd, WSRespCodeFailedCommandView, WSRespCodeSucceededCommandSubs, WSRespCodeSucceededCommandUnsubs, WSRespCodeSucceededCommandAdd, WSRespCodeSucceededCommandView, WSRespCodeStopStreaming, WSRespCodeUnknown}

var _WSRespCodeNameToValueMap = map[string]WSRespCode{
	_WSRespCodeName_0[0:7]:          WSRespCodeSuccess,
	_WSRespCodeLowerName_0[0:7]:     WSRespCodeSuccess,
	_WSRespCodeName_1[0:12]:         WSRespCodeLoginDenied,
	_WSRespCodeLowerName_1[0:12]:    WSRespCodeLoginDenied,
	_WSRespCodeName_2[0:15]:         WSRespCodeUnknownFailure,
	_WSRespCodeLowerName_2[0:15]:    WSRespCodeUnknownFailure,
	_WSRespCodeName_3[0:21]:         WSRespCodeServiceNotAvailable,
	_WSRespCodeLowerName_3[0:21]:    WSRespCodeServiceNotAvailable,
	_WSRespCodeName_3[21:37]:        WSRespCodeCloseConnection,
	_WSRespCodeLowerName_3[21:37]:   WSRespCodeCloseConnection,
	_WSRespCodeName_4[0:20]:         WSRespCodeReachedSymbolLimit,
	_WSRespCodeLowerName_4[0:20]:    WSRespCodeReachedSymbolLimit,
	_WSRespCodeName_4[20:41]:        WSRespCodeStreamConnNotFound,
	_WSRespCodeLowerName_4[20:41]:   WSRespCodeStreamConnNotFound,
	_WSRespCodeName_4[41:59]:        WSRespCodeBadCommandFormat,
	_WSRespCodeLowerName_4[41:59]:   WSRespCodeBadCommandFormat,
	_WSRespCodeName_4[59:78]:        WSRespCodeFailedCommandSubs,
	_WSRespCodeLowerName_4[59:78]:   WSRespCodeFailedCommandSubs,
	_WSRespCodeName_4[78:99]:        WSRespCodeFailedCommandUnsubs,
	_WSRespCodeLowerName_4[78:99]:   WSRespCodeFailedCommandUnsubs,
	_WSRespCodeName_4[99:117]:       WSRespCodeFailedCommandAdd,
	_WSRespCodeLowerName_4[99:117]:  WSRespCodeFailedCommandAdd,
	_WSRespCodeName_4[117:136]:      WSRespCodeFailedCommandView,
	_WSRespCodeLowerName_4[117:136]: WSRespCodeFailedCommandView,
	_WSRespCodeName_4[136:158]:      WSRespCodeSucceededCommandSubs,
	_WSRespCodeLowerName_4[136:158]: WSRespCodeSucceededCommandSubs,
	_WSRespCodeName_4[158:182]:      WSRespCodeSucceededCommandUnsubs,
	_WSRespCodeLowerName_4[158:182]: WSRespCodeSucceededCommandUnsubs,
	_WSRespCodeName_4[182:203]:      WSRespCodeSucceededCommandAdd,
	_WSRespCodeLowerName_4[182:203]: WSRespCodeSucceededCommandAdd,
	_WSRespCodeName_4[203:225]:      WSRespCodeSucceededCommandView,
	_WSRespCodeLowerName_4[203:225]: WSRespCodeSucceededCommandView,
	_WSRespCodeName_4[225:239]:      WSRespCodeStopStreaming,
	_WSRespCodeLowerName_4[225:239]: WSRespCodeStopStreaming,
	_WSRespCodeName_5[0:7]:          WSRespCodeUnknown,
	_WSRespCodeLowerName_5[0:7]:     WSRespCodeUnknown,
}

var _WSRespCodeNames = []string{
	_WSRespCodeName_0[0:7],
	_WSRespCodeName_1[0:12],
	_WSRespCodeName_2[0:15],
	_WSRespCodeName_3[0:21],
	_WSRespCodeName_3[21:37],
	_WSRespCodeName_4[0:20],
	_WSRespCodeName_4[20:41],
	_WSRespCodeName_4[41:59],
	_WSRespCodeName_4[59:78],
	_WSRespCodeName_4[78:99],
	_WSRespCodeName_4[99:117],
	_WSRespCodeName_4[117:136],
	_WSRespCodeName_4[136:158],
	_WSRespCodeName_4[158:182],
	_WSRespCodeName_4[182:203],
	_WSRespCodeName_4[203:225],
	_WSRespCodeName_4[225:239],
	_WSRespCodeName_5[0:7],
}

// WSRespCodeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func WSRespCodeString(s string) (WSRespCode, error) {
	if val, ok := _WSRespCodeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _WSRespCodeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to WSRespCode values", s)
}

// WSRespCodeValues returns all values of the enum
func WSRespCodeValues() []WSRespCode {
	return _WSRespCodeValues
}

// WSRespCodeStrings returns a slice of all String values of the enum
func WSRespCodeStrings() []string {
	strs := make([]string, len(_WSRespCodeNames))
	copy(strs, _WSRespCodeNames)
	return strs
}

// IsAWSRespCode returns "true" if the value is listed in the enum definition. "false" otherwise
func (i WSRespCode) IsAWSRespCode() bool {
	for _, v := range _WSRespCodeValues {
		if i == v {
			return true
		}
	}
	return false
}
